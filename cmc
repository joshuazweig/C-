#!/bin/sh

#Requires you have LLI variable set (I reccomend in your bash profile) to your LLI
#may need to chmod this script to 755

VER="3.8"
LLC="/usr/local/opt/llvm@$VER/bin/llc-$VER"
CRYPTO="/usr/lib/libcrypto.0.9.8.dylib"
TEST="$2"

usage() { echo "Usage: $0 [-h help] [-a ast] [-l llvm] [-c ll-file] [-s s-file] [-e exe-file] <file-name>.cm" 1>&2; exit 1; }

help() { echo "\n \t Welcome to the C% compiler CMC! 
				\n \t \t USAGE: $0 [-h help] [-a ast] [-l llvm] [-c ll-file] [-s s-file] [-e exe-file] <file-name>.cm\n 
				\n \t \t OPTIONS:
				-h 	help  		This option prints this message!\n
				-a 	ast 		This option prints the ast of the program to standard out.\n
				-l 	llvm		Compiles <file-name>.cm to llvm and prints the result to stdout.\n
				-c 	ll-file		Compiles <file-name>.cm to llvm and puts the result in <file-name>.ll\n
				-s 	assembly	Compiles <file-name>.cm to llvm, translates to assembly, and puts the result in <file-name>.s 
								(leaves <file-name>.ll in directory as well)\n
				-e 	executable	Creates the executable version of <file-name>.cm, simply called <file-name> to be run ./<file-name> 
								(leaves behind the corresponding .ll and .s files as well)" 1>&2; exit 1; }

while getopts "h:t:a:l:c:s:e:" c; do
	basename=`echo "$TEST" | sed 's/.*\\///
                             s/.cm//'`
	# echo "$TEST"   

	# WANT --> tokens, pretty print ast/menhir, default to -c                          
    case $c in
        h) # help
			help
			;;
		t) # print tokenized program
			ocamllex scannerprint.mll
			ocaml scannerprint.ml < "$TEST"
			;;
		a) # print the AST to stdout
			ocamllex scannerprint.mll
                        ocaml scannerprint.ml < "$TEST" | menhir --interpret --interpret-show-cst parser.mly
			# ./cmod.native -a < "$TEST"
			;;
		l) # compile to llvm, print to stdout
			./cmod.native < "$TEST"
			;;
		c) # compile to llvm, put in .ll file
			./cmod.native < "$TEST" > ${basename}.ll
			;;
		s) # translate to .s file
			./cmod.native < "$TEST" > ${basename}.ll
			"$LLC" ${basename}.ll > ${basename}.s
			# rm ${basename}.ll 							# Don't keep intermediates
			;;
		e) # create executable
			./cmod.native < "$TEST" > ${basename}.ll
			"$LLC" ${basename}.ll > ${basename}.s
			cc -o ${basename} ${basename}.s special_arith.o "$CRYPTO"
			# rm ${basename}.s
			# rm ${basename}.ll
			;;
		*) # everything else
			usage
			;;
    esac
done

# DEFAULT
# ./cmod.native < "$TEST" > ${basename}.ll


# "$LLC" ${basename}.ll > ${basename}.s

# cc -o ${basename} ${basename}.s special_arith.o "$CRYPTO"
# ./${basename}.exe
