// Key Scheduling Algorithm
// Input: state - the state used to generate the keystream
//        key - Key to use to initialize the state
//        len - length of key in bytes
void ksa(char *state, char *key, int len)
{
  mint j;
  int t;
  int i;

  for (i=0; *i < 256; i = i+1){
    *(state+i) = i;
  }
  j = 0;
  for (i=0; i < 256; i = i+1) {
    mint temp;
    temp = <i,len>;
    int key_index;
    key_index = access(temp,0);
    j = <(j + *(state+i) + *(key+key_index),256>;
    t = *(state+i);
    *(state+i) = *(state+j);
    *(state+access(j,0)) = t;
  }
}

// Pseudo-Random Generator Algorithm
// Input: state - the state used to generate the keystream
//        out - Must be of at least "len" length
//        len - number of bytes to generate
void prga(char *state, char *out, int len)
{
   mint i;
   int j;
   int x;
   int t;

   i = "0";
   j = 0;
   char key;

   for (x=0; x < len; ++x)  {
      i = <(i + 1, 256>;
      j = <(j + *(state+i)), 256>;
      t = *(state+i);
      *(state+i) = *(state+j);
      *(state+j) = t;
      mint out_temp;
      out_temp = <(*(state + *(state+i) + *(state+j))),256>;
      *(out+x) = access(out_temp,0);
   }
}
int main(){

  char *state;
  char *key;
  key = malloc(20);

  printf("Enter key: ");
  scanf(key);

  int len;
  len = 18;

  ksa(state,key,len);

  char *out;
  out = malloc(20);

  prga(state,out,len);

  printf("%s\n",out);
  return 0;
}
