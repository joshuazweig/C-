type token =
  | SEMI
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LSQUARE
  | RSQUARE
  | PLUS
  | MINUS
  | STAR
  | DIVIDE
  | MOD
  | ASSIGN
  | NOT
  | POW
  | ADDRESSOF
  | MODASSIGN
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | DO
  | BREAK
  | CONTINUE
  | INT
  | CHAR
  | VOID
  | NULL
  | STONE
  | MINT
  | CURVE
  | POINT
  | INF
  | ACCESS
  | LITERAL of (int)
  | ID of (string)
  | STRING of (string)
  | SGLQUOTE
  | DBLQUOTE
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 58 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* COMMA *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* LSQUARE *);
  264 (* RSQUARE *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* STAR *);
  268 (* DIVIDE *);
  269 (* MOD *);
  270 (* ASSIGN *);
  271 (* NOT *);
  272 (* POW *);
  273 (* ADDRESSOF *);
  274 (* MODASSIGN *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* LEQ *);
  279 (* GT *);
  280 (* GEQ *);
  281 (* AND *);
  282 (* OR *);
  283 (* RETURN *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* FOR *);
  287 (* WHILE *);
  288 (* DO *);
  289 (* BREAK *);
  290 (* CONTINUE *);
  291 (* INT *);
  292 (* CHAR *);
  293 (* VOID *);
  294 (* NULL *);
  295 (* STONE *);
  296 (* MINT *);
  297 (* CURVE *);
  298 (* POINT *);
  299 (* INF *);
  300 (* ACCESS *);
  304 (* SGLQUOTE *);
  305 (* DBLQUOTE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  301 (* LITERAL *);
  302 (* ID *);
  303 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\007\000\007\000\003\000\008\000\008\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\012\000\012\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\013\000\013\000\014\000\014\000\
\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\000\000\002\000\003\000\000\000\002\000\002\000\002\000\
\003\000\003\000\005\000\007\000\009\000\005\000\006\000\002\000\
\002\000\001\000\000\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\004\000\
\003\000\001\000\002\000\002\000\003\000\003\000\003\000\003\000\
\005\000\007\000\004\000\002\000\000\000\001\000\001\000\003\000\
\002\000"

let yydefred = "\000\000\
\002\000\000\000\073\000\000\000\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\001\000\003\000\004\000\000\000\017\000\
\000\000\020\000\000\000\000\000\000\000\000\000\008\000\000\000\
\000\000\018\000\000\000\000\000\009\000\019\000\000\000\000\000\
\000\000\034\000\000\000\021\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\058\000\039\000\000\000\037\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\053\000\059\000\054\000\060\000\
\000\000\024\000\000\000\000\000\000\000\000\000\000\000\032\000\
\033\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\000\
\026\000\000\000\025\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\063\000\
\000\000\000\000\000\000\000\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\000\000\000\067\000\000\000\000\000\
\000\000\000\000\030\000\000\000\000\000\000\000\000\000\000\000\
\031\000\000\000\028\000\000\000\000\000\029\000"

let yydgoto = "\002\000\
\003\000\004\000\013\000\014\000\015\000\021\000\028\000\032\000\
\022\000\057\000\058\000\102\000\106\000\107\000"

let yysindex = "\022\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\247\254\000\000\
\065\255\000\000\095\255\254\254\020\255\017\255\000\000\024\255\
\095\255\000\000\000\255\095\255\000\000\000\000\015\255\112\255\
\029\255\000\000\059\255\000\000\000\000\059\255\059\255\059\255\
\059\255\059\255\116\000\036\255\042\255\075\255\067\000\089\255\
\091\255\000\000\000\000\059\255\000\000\018\255\049\255\053\255\
\000\000\074\001\041\002\161\255\000\000\000\000\000\000\000\000\
\249\001\000\000\100\001\059\255\059\255\059\255\079\255\000\000\
\000\000\108\255\059\255\059\255\059\255\059\255\066\255\067\255\
\000\000\059\255\059\255\059\255\059\255\059\255\059\255\059\255\
\059\255\059\255\059\255\059\255\059\255\059\255\059\255\000\000\
\000\000\059\255\000\000\064\002\147\002\124\255\087\002\123\255\
\147\002\134\255\126\255\129\002\147\002\147\002\000\000\000\000\
\108\255\108\255\125\255\125\255\125\255\000\000\216\002\216\002\
\174\255\174\255\174\255\174\255\200\002\183\002\018\002\067\000\
\059\255\067\000\059\255\000\000\059\255\000\000\059\255\125\000\
\118\255\147\255\000\000\110\002\147\002\165\002\067\000\059\255\
\000\000\125\000\000\000\145\255\067\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\148\255\000\000\000\000\149\255\000\000\000\000\
\000\000\000\000\000\000\210\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\174\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\150\255\000\000\000\000\000\000\
\000\000\063\255\155\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\255\000\000\000\000\000\000\
\073\255\000\000\159\255\000\000\173\255\222\255\000\000\000\000\
\126\001\152\001\200\000\226\000\252\000\000\000\006\000\230\001\
\162\001\188\001\196\001\222\001\121\000\012\255\000\000\000\000\
\150\255\000\000\000\000\000\000\000\000\000\000\000\000\022\001\
\018\000\000\000\000\000\000\000\077\255\000\000\000\000\164\255\
\000\000\048\001\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\126\000\000\000\003\000\000\000\000\000\129\000\
\000\000\219\255\221\255\139\255\000\000\000\000"

let yytablesize = 1008
let yytable = "\059\000\
\012\000\016\000\061\000\062\000\063\000\064\000\065\000\067\000\
\016\000\071\000\016\000\138\000\052\000\052\000\036\000\052\000\
\074\000\036\000\025\000\052\000\075\000\020\000\001\000\024\000\
\076\000\016\000\148\000\027\000\026\000\018\000\031\000\077\000\
\100\000\101\000\103\000\078\000\017\000\052\000\068\000\105\000\
\108\000\109\000\110\000\023\000\069\000\029\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\121\000\122\000\
\123\000\124\000\125\000\126\000\033\000\035\000\127\000\068\000\
\068\000\018\000\068\000\019\000\038\000\039\000\068\000\068\000\
\068\000\040\000\071\000\041\000\071\000\070\000\072\000\042\000\
\072\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\072\000\137\000\073\000\139\000\101\000\079\000\140\000\
\050\000\141\000\080\000\142\000\123\000\051\000\052\000\053\000\
\054\000\147\000\055\000\056\000\101\000\104\000\123\000\150\000\
\034\000\111\000\035\000\112\000\036\000\037\000\084\000\085\000\
\086\000\038\000\039\000\087\000\129\000\131\000\040\000\133\000\
\041\000\005\000\006\000\007\000\042\000\008\000\009\000\010\000\
\011\000\132\000\043\000\044\000\087\000\045\000\046\000\047\000\
\048\000\049\000\143\000\144\000\149\000\050\000\035\000\006\000\
\007\000\030\000\051\000\052\000\053\000\054\000\069\000\055\000\
\056\000\034\000\070\000\035\000\060\000\036\000\097\000\035\000\
\000\000\000\000\038\000\039\000\000\000\055\000\055\000\040\000\
\055\000\041\000\000\000\000\000\055\000\042\000\082\000\083\000\
\084\000\085\000\086\000\043\000\044\000\087\000\045\000\046\000\
\047\000\048\000\049\000\000\000\000\000\000\000\050\000\000\000\
\000\000\000\000\000\000\051\000\052\000\053\000\054\000\000\000\
\055\000\056\000\021\000\000\000\021\000\000\000\021\000\021\000\
\000\000\000\000\000\000\021\000\021\000\000\000\062\000\062\000\
\021\000\062\000\021\000\000\000\000\000\062\000\021\000\000\000\
\000\000\000\000\000\000\000\000\021\000\021\000\000\000\021\000\
\021\000\021\000\021\000\021\000\000\000\000\000\000\000\021\000\
\000\000\000\000\000\000\000\000\021\000\021\000\021\000\021\000\
\000\000\021\000\021\000\000\000\000\000\000\000\045\000\045\000\
\000\000\045\000\000\000\000\000\000\000\045\000\000\000\000\000\
\000\000\000\000\027\000\000\000\027\000\000\000\027\000\027\000\
\045\000\045\000\000\000\027\000\027\000\000\000\045\000\045\000\
\027\000\000\000\027\000\005\000\006\000\007\000\027\000\008\000\
\009\000\010\000\011\000\000\000\027\000\027\000\000\000\027\000\
\027\000\027\000\027\000\027\000\000\000\000\000\000\000\027\000\
\000\000\000\000\000\000\000\000\027\000\027\000\027\000\027\000\
\000\000\027\000\027\000\034\000\000\000\035\000\000\000\036\000\
\000\000\000\000\000\000\000\000\038\000\039\000\000\000\000\000\
\000\000\040\000\000\000\041\000\000\000\000\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\043\000\044\000\000\000\
\045\000\046\000\047\000\048\000\049\000\000\000\000\000\000\000\
\050\000\000\000\000\000\000\000\000\000\051\000\052\000\053\000\
\054\000\000\000\055\000\056\000\066\000\000\000\035\000\000\000\
\000\000\051\000\051\000\000\000\051\000\038\000\039\000\035\000\
\051\000\000\000\040\000\000\000\041\000\000\000\038\000\039\000\
\042\000\000\000\000\000\040\000\000\000\041\000\000\000\000\000\
\000\000\051\000\051\000\000\000\000\000\000\000\000\000\000\000\
\000\000\050\000\000\000\000\000\000\000\000\000\051\000\052\000\
\053\000\054\000\050\000\055\000\056\000\000\000\000\000\051\000\
\052\000\053\000\054\000\000\000\055\000\056\000\038\000\038\000\
\000\000\038\000\000\000\000\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\000\000\000\000\038\000\000\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\042\000\042\000\000\000\042\000\000\000\000\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\000\000\000\000\000\000\
\000\000\000\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\043\000\043\000\000\000\043\000\000\000\000\000\
\000\000\043\000\043\000\043\000\043\000\043\000\043\000\000\000\
\000\000\000\000\000\000\000\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\061\000\061\000\000\000\061\000\
\000\000\000\000\000\000\061\000\061\000\061\000\061\000\061\000\
\061\000\000\000\000\000\000\000\000\000\000\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\065\000\065\000\
\000\000\065\000\000\000\000\000\000\000\065\000\065\000\000\000\
\000\000\065\000\065\000\000\000\000\000\065\000\000\000\000\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\066\000\066\000\000\000\066\000\000\000\000\000\000\000\066\000\
\066\000\000\000\000\000\066\000\066\000\000\000\000\000\066\000\
\000\000\000\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\081\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\082\000\083\000\084\000\085\000\086\000\000\000\
\000\000\087\000\000\000\000\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\099\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\082\000\083\000\084\000\085\000\
\086\000\000\000\000\000\087\000\000\000\000\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\040\000\040\000\
\000\000\040\000\000\000\000\000\000\000\040\000\040\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\041\000\041\000\000\000\041\000\000\000\000\000\000\000\041\000\
\041\000\041\000\047\000\047\000\000\000\047\000\000\000\000\000\
\000\000\047\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\000\000\000\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\048\000\048\000\000\000\048\000\
\000\000\000\000\000\000\048\000\049\000\049\000\000\000\049\000\
\000\000\000\000\000\000\049\000\000\000\000\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\050\000\050\000\
\000\000\050\000\000\000\000\000\000\000\050\000\046\000\046\000\
\000\000\046\000\000\000\000\000\000\000\046\000\000\000\000\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\046\000\046\000\098\000\000\000\000\000\000\000\046\000\046\000\
\000\000\082\000\083\000\084\000\085\000\086\000\000\000\000\000\
\087\000\000\000\000\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\135\000\000\000\000\000\000\000\000\000\
\000\000\000\000\082\000\083\000\084\000\085\000\086\000\000\000\
\000\000\087\000\000\000\000\000\088\000\089\000\090\000\091\000\
\136\000\093\000\094\000\095\000\096\000\000\000\000\000\000\000\
\000\000\082\000\083\000\084\000\085\000\086\000\000\000\000\000\
\087\000\000\000\000\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\128\000\000\000\000\000\000\000\000\000\
\082\000\083\000\084\000\085\000\086\000\000\000\000\000\087\000\
\000\000\000\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\130\000\000\000\000\000\000\000\000\000\082\000\
\083\000\084\000\085\000\086\000\000\000\000\000\087\000\000\000\
\000\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\145\000\000\000\000\000\000\000\000\000\082\000\083\000\
\084\000\085\000\086\000\000\000\000\000\087\000\000\000\000\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\134\000\082\000\083\000\084\000\085\000\086\000\000\000\000\000\
\087\000\000\000\000\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\082\000\083\000\084\000\085\000\086\000\
\000\000\000\000\087\000\000\000\000\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\082\000\083\000\084\000\
\085\000\086\000\000\000\000\000\087\000\000\000\000\000\088\000\
\089\000\090\000\091\000\146\000\093\000\094\000\095\000\082\000\
\083\000\084\000\085\000\086\000\000\000\000\000\087\000\000\000\
\000\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\082\000\083\000\084\000\085\000\086\000\000\000\000\000\087\000\
\000\000\000\000\088\000\089\000\090\000\091\000\092\000\093\000\
\082\000\083\000\084\000\085\000\086\000\000\000\000\000\087\000\
\000\000\000\000\000\000\000\000\090\000\091\000\092\000\093\000"

let yycheck = "\035\000\
\000\000\011\001\038\000\039\000\040\000\041\000\042\000\043\000\
\011\001\047\000\011\001\129\000\001\001\002\001\001\001\004\001\
\052\000\004\001\002\001\008\001\003\001\019\000\001\000\004\001\
\007\001\011\001\144\000\025\000\005\001\001\001\028\000\014\001\
\068\000\069\000\070\000\018\001\046\001\026\001\003\001\075\000\
\076\000\077\000\078\000\046\001\003\001\046\001\082\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\046\001\003\001\098\000\001\001\
\002\001\001\001\004\001\003\001\010\001\011\001\008\001\009\001\
\010\001\015\001\002\001\017\001\004\001\003\001\002\001\021\001\
\004\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\001\001\128\000\001\001\130\000\129\000\046\001\131\000\
\038\001\133\000\046\001\135\000\136\000\043\001\044\001\045\001\
\046\001\143\000\048\001\049\001\144\000\031\001\146\000\149\000\
\001\001\048\001\003\001\049\001\005\001\006\001\011\001\012\001\
\013\001\010\001\011\001\016\001\001\001\003\001\015\001\002\001\
\017\001\035\001\036\001\037\001\021\001\039\001\040\001\041\001\
\042\001\004\001\027\001\028\001\016\001\030\001\031\001\032\001\
\033\001\034\001\029\001\001\001\004\001\038\001\001\001\004\001\
\004\001\028\000\043\001\044\001\045\001\046\001\004\001\048\001\
\049\001\001\001\004\001\003\001\036\000\005\001\006\001\004\001\
\255\255\255\255\010\001\011\001\255\255\001\001\002\001\015\001\
\004\001\017\001\255\255\255\255\008\001\021\001\009\001\010\001\
\011\001\012\001\013\001\027\001\028\001\016\001\030\001\031\001\
\032\001\033\001\034\001\255\255\255\255\255\255\038\001\255\255\
\255\255\255\255\255\255\043\001\044\001\045\001\046\001\255\255\
\048\001\049\001\001\001\255\255\003\001\255\255\005\001\006\001\
\255\255\255\255\255\255\010\001\011\001\255\255\001\001\002\001\
\015\001\004\001\017\001\255\255\255\255\008\001\021\001\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\255\255\030\001\
\031\001\032\001\033\001\034\001\255\255\255\255\255\255\038\001\
\255\255\255\255\255\255\255\255\043\001\044\001\045\001\046\001\
\255\255\048\001\049\001\255\255\255\255\255\255\001\001\002\001\
\255\255\004\001\255\255\255\255\255\255\008\001\255\255\255\255\
\255\255\255\255\001\001\255\255\003\001\255\255\005\001\006\001\
\019\001\020\001\255\255\010\001\011\001\255\255\025\001\026\001\
\015\001\255\255\017\001\035\001\036\001\037\001\021\001\039\001\
\040\001\041\001\042\001\255\255\027\001\028\001\255\255\030\001\
\031\001\032\001\033\001\034\001\255\255\255\255\255\255\038\001\
\255\255\255\255\255\255\255\255\043\001\044\001\045\001\046\001\
\255\255\048\001\049\001\001\001\255\255\003\001\255\255\005\001\
\255\255\255\255\255\255\255\255\010\001\011\001\255\255\255\255\
\255\255\015\001\255\255\017\001\255\255\255\255\255\255\021\001\
\255\255\255\255\255\255\255\255\255\255\027\001\028\001\255\255\
\030\001\031\001\032\001\033\001\034\001\255\255\255\255\255\255\
\038\001\255\255\255\255\255\255\255\255\043\001\044\001\045\001\
\046\001\255\255\048\001\049\001\001\001\255\255\003\001\255\255\
\255\255\001\001\002\001\255\255\004\001\010\001\011\001\003\001\
\008\001\255\255\015\001\255\255\017\001\255\255\010\001\011\001\
\021\001\255\255\255\255\015\001\255\255\017\001\255\255\255\255\
\255\255\025\001\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\038\001\255\255\255\255\255\255\255\255\043\001\044\001\
\045\001\046\001\038\001\048\001\049\001\255\255\255\255\043\001\
\044\001\045\001\046\001\255\255\048\001\049\001\001\001\002\001\
\255\255\004\001\255\255\255\255\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\001\001\002\001\255\255\004\001\255\255\255\255\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\001\001\002\001\255\255\004\001\255\255\255\255\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\001\001\002\001\255\255\004\001\
\255\255\255\255\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\001\001\002\001\
\255\255\004\001\255\255\255\255\255\255\008\001\009\001\255\255\
\255\255\012\001\013\001\255\255\255\255\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\001\001\002\001\255\255\004\001\255\255\255\255\255\255\008\001\
\009\001\255\255\255\255\012\001\013\001\255\255\255\255\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\001\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\016\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\001\001\002\001\
\255\255\004\001\255\255\255\255\255\255\008\001\009\001\010\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\001\001\002\001\255\255\004\001\255\255\255\255\255\255\008\001\
\009\001\010\001\001\001\002\001\255\255\004\001\255\255\255\255\
\255\255\008\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\001\001\002\001\255\255\004\001\
\255\255\255\255\255\255\008\001\001\001\002\001\255\255\004\001\
\255\255\255\255\255\255\008\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\001\001\002\001\
\255\255\004\001\255\255\255\255\255\255\008\001\001\001\002\001\
\255\255\004\001\255\255\255\255\255\255\008\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\019\001\020\001\002\001\255\255\255\255\255\255\025\001\026\001\
\255\255\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\002\001\255\255\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\004\001\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\004\001\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\004\001\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\004\001\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\016\001\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\016\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\016\001\
\255\255\255\255\255\255\255\255\021\001\022\001\023\001\024\001"

let yynames_const = "\
  SEMI\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LSQUARE\000\
  RSQUARE\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  NOT\000\
  POW\000\
  ADDRESSOF\000\
  MODASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  DO\000\
  BREAK\000\
  CONTINUE\000\
  INT\000\
  CHAR\000\
  VOID\000\
  NULL\000\
  STONE\000\
  MINT\000\
  CURVE\000\
  POINT\000\
  INF\000\
  ACCESS\000\
  SGLQUOTE\000\
  DBLQUOTE\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  ID\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 40 "parser.mly"
            ( _1 )
# 530 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
                 ( [], [] )
# 536 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 44 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 544 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 45 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 552 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 49 "parser.mly"
     ( { typ = _1;
     fname = _2;
     formals = _4;
     locals = List.rev _7;
     body = List.rev _8 } )
# 567 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                  ( [] )
# 573 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 57 "parser.mly"
                  ( List.rev _1 )
# 580 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 60 "parser.mly"
                             ( [(_1,_2)] )
# 588 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 61 "parser.mly"
                             ( (_3,_4) :: _1 )
# 597 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
        ( Int )
# 603 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
         ( Char )
# 609 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
         ( Void )
# 615 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
          ( Stone )
# 621 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
         ( Mint )
# 627 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
          ( Curve )
# 633 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
          ( Point )
# 639 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 71 "parser.mly"
             ( Pointer(_1) )
# 646 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
                     ( [] )
# 652 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 75 "parser.mly"
                     ( _2 :: _1 )
# 660 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 78 "parser.mly"
               ( (_1, _2) )
# 668 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
                ( [] )
# 674 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 82 "parser.mly"
                   ( _2 :: _1 )
# 682 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
              ( Expr _1 )
# 689 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                ( Return Noexpr )
# 695 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                     ( Return _2 )
# 702 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 88 "parser.mly"
                            ( Block(List.rev _2) )
# 709 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 89 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 717 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 90 "parser.mly"
                                            ( If(_3, _5, _7) )
# 726 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 736 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "parser.mly"
                                  ( While(_3, _5) )
# 744 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'stmt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                                     ( DoWhile(_2, _5) )
# 752 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
               ( Break )
# 758 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                  ( Continue )
# 764 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
         ( NullStmt )
# 770 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                  ( Noexpr )
# 776 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                  ( _1 )
# 783 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 104 "parser.mly"
                     ( Literal(_1) )
# 790 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 105 "parser.mly"
                     ( Id(_1) )
# 797 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
                     ( Inf )
# 803 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 811 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 819 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 827 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 835 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Pow,   _3) )
# 843 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 851 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 859 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 867 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 875 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 883 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 891 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 899 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 907 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                         ( Unop(Neg, _2) )
# 914 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Unop(Not, _2) )
# 921 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                     ( Assign(_1, _3) )
# 929 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 123 "parser.mly"
                                 ( Call(_1, _3) )
# 937 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                       ( _2 )
# 944 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "parser.mly"
         ( Null )
# 950 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                              ( Unop(Deref, _2) )
# 957 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                     ( Unop(AddrOf, _2) )
# 964 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                  ( Binop(_1,   Mod, _3) )
# 972 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                       ( ModAssign(_1, _3) )
# 980 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 130 "parser.mly"
                         ( String(_2) )
# 987 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 131 "parser.mly"
                         ( Ch(_2) )
# 994 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                          ( Construct2(_2, _4) )
# 1002 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                                     ( Construct3(_2, _4, _6) )
# 1011 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                            ( Subscript(_1, _3) )
# 1019 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                ( Unop(Access, _2) )
# 1026 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "parser.mly"
                  ( [] )
# 1032 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 139 "parser.mly"
                  ( List.rev _1 )
# 1039 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                            ( [_1] )
# 1046 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                            ( _3 :: _1 )
# 1054 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
